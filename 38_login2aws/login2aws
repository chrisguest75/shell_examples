#!/usr/bin/env bash
set -ef -o pipefail

readonly SCRIPT_NAME=$(basename "$0")
readonly SCRIPT_PATH=${0}
# shellcheck disable=SC2034
readonly SCRIPT_DIR=$(dirname "$SCRIPT_PATH")

#echo "SCRIPT_NAME=${SCRIPT_NAME}"
#echo "SCRIPT_PATH=${SCRIPT_PATH}"
#echo "SCRIPT_DIR=${SCRIPT_DIR}"
accounts=$SCRIPT_DIR/account.json

if [[ -n ${LOGIN2AWS_ACCOUNTS} ]]; then
    if [[ -f ${LOGIN2AWS_ACCOUNTS} ]]; then
        accounts=${LOGIN2AWS_ACCOUNTS}
    else
        >&2 echo "ERROR: 'LOGIN2AWS_ACCOUNTS=${LOGIN2AWS_ACCOUNTS}' does not exist"
        exit 1
    fi
else
    if [[ ! -f ${accounts} ]]; then
        >&2 echo "ERROR: Default location '${accounts}' does not exist"
        exit 1
    fi
fi

function help() {
    cat <<- EOF
usage: $SCRIPT_NAME options

OPTIONS:
    -h --help -?               show this help
    --autocompletescript       output the autocompletion 

Examples:
    $SCRIPT_NAME --help 

EOF
}

# function autocompletion_script() {
#     cat <<- EOF
# #!/bin/bash -x 
# #!/usr/bin/env bash 
# #Use !/bin/bash -x  for debugging 
# autoload bashcompinit
# bashcompinit

# _test_script_completion()
# {
#   if [[ -n $COMPLETION_DEBUG ]]; then
#     # Used for debugging.
#     COMPREPLY=()
#     echo ""
#     echo "$$1 : $1"
#     echo "$$2 : $2"
#     echo "$$3 : $3"
#     echo "COMP_WORDS : ${COMP_WORDS}"
#     echo "COMP_CWORD : ${COMP_CWORD}"
#     echo "COMP_WORDS[COMP_CWORD] : ${COMP_WORDS[COMP_CWORD]}"
#     echo "COMP_WORDS[COMP_CWORD-1] : ${COMP_WORDS[COMP_CWORD-1]}"
#     echo "COMP_LINE : ${COMP_LINE}"
#     echo "COMP_POINT : ${COMP_POINT}"
#     echo "COMP_KEY : ${COMP_KEY}"
#     echo "COMP_TYPE : ${COMP_TYPE}"
#     echo "args : $@"
#     echo "reply : ${COMPREPLY}"
#   else
#     # COMP_CWORD is the current work completion index
#     case ${COMP_CWORD} in
#       1)
#         COMPREPLY=($(compgen -W "$(./login2aws --complete)"))
#       ;;    
#       *)
#         COMPREPLY=()
#       ;;
#     esac

#   fi
# }

# complete -F _test_script_completion login2aws
# EOF
# }


for i in "$@"
do
case $i in
    -h|--help)
        help
        exit 0
    ;; 
    -c|--complete)
        query=".[] | select(.name | test(\"^$name.*$\")) | \"\(.name)\""
        jq -c -r --arg name "$1" "$query" $accounts
        exit 0
    ;; 
    --autocompletescript)
        #autocompletion_script
        exit 0
    ;;     
esac
done  

name=""
if [[ -z $1 ]]; then
    #echo "Warning: no env name provided"
    name=""
else
    name=$1
fi

query=".[] | select(.name | test(\"^$name.*$\")) | \"\(.name)\""
roles=$(jq -c -r --arg name "$1" "$query" $accounts | wc -l)

if [[ $roles -ne 1 ]]; then
    query=".[] | select(.name | test(\"^$name.*$\")) | \"\(.name)\""
    jq -c -r --arg name "$1" "$query" $accounts
else
    query=".[] | select(.name | test(\"^$name.*$\")) | \"\(.name) \(.role)\""
    out=$(jq -c -r --arg name "$1" "$query" $accounts)

    name=$(echo "$out" | awk '{print $1}')
    role=$(echo "$out" | awk '{print $2}')
    echo "Logon to $name with $role"
    saml2aws --session-duration=7200 --role "$role" login --force --idp-account=default && eval $(saml2aws script)
fi
