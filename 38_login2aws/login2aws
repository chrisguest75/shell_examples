#!/usr/bin/env bash
set -ef -o pipefail

readonly SCRIPT_NAME=$(basename "$0")
readonly SCRIPT_PATH=${0}
# shellcheck disable=SC2034
readonly SCRIPT_DIR=$(dirname "$SCRIPT_PATH")

readonly accounts=./account.json

function help() {
    cat <<- EOF
usage: $SCRIPT_NAME options

OPTIONS:
    -h --help -?               show this help

Examples:
    $SCRIPT_NAME --help 

EOF
}

for i in "$@"
do
case $i in
    -h|--help)
        help
        exit 0
    ;; 
    -a|--autocomplete)
        query=".[] | select(.name | test(\"^$name.*$\")) | \"\(.name)\""
        jq -c -r --arg name "$1" "$query" $accounts
        exit 0
    ;; 
esac
done  

name=""
if [[ -z $1 ]]; then
    #echo "Warning: no env name provided"
    name=""
else
    name=$1
fi

query=".[] | select(.name | test(\"^$name.*$\")) | \"\(.name)\""
roles=$(jq -c -r --arg name "$1" "$query" $accounts | wc -l)

if [[ $roles -ne 1 ]]; then
    query=".[] | select(.name | test(\"^$name.*$\")) | \"\(.name)\""
    jq -c -r --arg name "$1" "$query" $accounts
else
    query=".[] | select(.name | test(\"^$name.*$\")) | \"\(.name) \(.role)\""
    out=$(jq -c -r --arg name "$1" "$query" $accounts)

    name=$(echo "$out" | awk '{print $1}')
    role=$(echo "$out" | awk '{print $2}')
    echo "Logon to $name with $role"
    #saml2aws --cache-saml --session-duration=7200 --role "$role" login --force && eval $(saml2aws script)
fi
